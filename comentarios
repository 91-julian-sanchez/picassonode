/*==========================================*/
|FLUJO DE DATOS                             |
/*==========================================*/

1.0 llamar un servicio angular.service() 
1.1 Peticion al servidor de las coordenadas del mapa (Promise)

Orden controladores
1.NodesController


1.Carga modelo


1. NodesController -> inicia picaso 


/*==========================================*/
|FLUJO DE EJECUCION                          |
/*==========================================*/

*Se invocan las dependencias requeridas por el controlador.

	Controllers
		|-NodesController
			Depeendencias
				- <modelo>TreeModel	    | dir: tree/TreeModel.js
				- <modelo>NodesModel    | dir: nodes/NodesModel.js
				- <modelo>PicassoModel  | dir: picasso/PicassoModel.js 

		|-PicassoController
			Depeendencias
				- <modelo>NodesModel    | dir: nodes/NodesModel.js 
				- <modelo>PicassoModel  | dir: picasso/PicassoModel.js 

		|-LayersController
			Depeendencias
				- <modelo>TreeModel	    | dir: tree/TreeModel.js
				- <modelo>NodesModel    | dir: nodes/NodesModel.js
				- <modelo>PicassoModel  | dir: picasso/PicassoModel.js 


* Los Modelos ejecutan los servicios app.service() ejecutando las peticiones REST (Get, Post , Put, Delete) que requieran los controladores.

	NodesModel
	-NodesModel._service = (NodesService | dir: nodes/NodesService.js)   

	PicassoModel
	-PicassoModel._service = (NodesService | dir: nodes/NodesService.js)

	TreeModel
	-TreeModel._service = (NodesService | dir: nodes/NodesService.js)

* Inician los controladores

* Se ejecutan los script existentes en el controlador (Nota: solo codigo no asincrono).

* Se ejecutan los script contenidos en las ejecuciones de las promesas 'promise.then(...)' de los controladores. 

	  promise.then(
	  function(answer) {
	    // do something
	  },
	  function(error) {
	    // report something
	  },
	  function(progress) {
	   // report progress
	  });


* MODULO NODES

	|-CONTROLADOR
		* Es el controlador principal sera el padre de los demas controladores y el que tendra el amito ($scope) con mayor jerarquia
		* El controlador invoca el servicio de TreeServise que contiene los nodos traidos desde el servidor y lo asigna a una variable promesa (promise).
		* Luego se ejecuta la functio init del TreeModel que se engargara de convertir y retornar los nodos en una estructura de arbol utilizando la libreria TreeModel (colocar link), esta estructura se asigna al ambito ($scope) de la aplicacion en la variable $scope.tree.
	   
* MODULO PICASSO

	|-CONTROLADOR
		*Este controlador se encarga de ejecutar la funcion init del PicassoModel que se encarga de crear el path data <path d="...." /> para cada nodo 

	|-MODELO
		*Este modelo se encarga de modificar los atributos graficos de los nodos (fill,fill_over,stroke, etc).

* MODULO LAYERS